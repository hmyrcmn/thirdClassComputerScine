# -*- coding: utf-8 -*-
"""mantarDesicion.ipynb adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15JZ7cjl3iMI2tMwupGdKYin9eSw-xYr1
"""

# -*- coding: utf-8 -*-
"""mantarDesicion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U-ui9owkn-MzIGvDOFjR5uF-thaMd0bN
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pandas
!pip install scikit-learn
!pip install scikit-plot
!pip install graphviz

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn import tree
import seaborn as sns
import graphviz

# Veri dosyasının yolu
file_path = "/content/drive/MyDrive/data/secondary_data.csv"

# Veriyi okuma
data = pd.read_csv(file_path, header=None)

# data.info() çıktısını kontrol etme
print(data.info())

# İlk 5 satırı görüntüleme
print(data.head())

print(data.info)

# Veri setini doğru bir şekilde ayırma
data = data[0].str.split(';', expand=True)

# İlk satırı sütun isimleri olarak atama
data.columns = data.iloc[0]

# İlk satırı veri setinden kaldırma
data = data[1:]

# Veri setinin boyutunu görüntüleme
print(data.shape)

# Özniteliklerin isimlerini kontrol etme
print(data.columns)

print(data.info)

# Sütun adlarında düzeltmeler yapma
data.columns = data.columns.str.strip().str.lower().str.replace('-', '_')

# Veri setinin boyutunu görüntüleme
print(data.shape)

# Düzelti sütun adlarını kontrol etme
print(data.columns)

# Sütun adlarını güncelleme
data.columns = ['class', 'cap_diameter', 'cap_shape', 'cap_surface', 'cap_color',
       'does_bruise_or_bleed', 'gill_attachment', 'gill_spacing', 'gill_color',
       'stem_height', 'stem_width', 'stem_root', 'stem_surface', 'stem_color',
       'veil_type', 'veil_color', 'has_ring', 'ring_type', 'spore_print_color',
       'habitat', 'season']

print(data.info)

labels = data['class']
data = data.drop('class', axis=1)

# Veri setinin boyutunu görüntüleme
print(data.shape)

# Her özniteliğin benzersiz değerlerinin sayısını görüntüleme
for col in data.columns:
    print(col, len(data[col].unique()))

# Eksik değerleri "?" ile doldurma
data = data.replace('?', np.nan)

# Eksik değerleri içeren satırları veri setinden kaldırma
data = data.dropna()

print(data.info)

# Veri setindeki kategorik değişkenleri sayısal değerlere dönüştürme
data = pd.get_dummies(data)

# Veri setini eğitim ve test setlerine ayırma
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Random Forest sınıflandırma modelini oluşturma ve eğitme
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Test setindeki verileri kullanarak modelin performansını ölçme
y_pred = rf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
confusion_mat = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

# Performans ölçütlerini ekrana yazdırma
print("Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion_mat)
print("Classification Report:\n", class_report)

# Confusion Matrix'i görselleştirme
sns.heatmap(confusion_mat, annot=True, cmap="Blues")

import matplotlib.pyplot as plt
import seaborn as sns

# Performans ölçütlerini ekrana yazdırma
print("Accuracy:", accuracy)
print("Confusion Matrix:\n", confusion_mat)
print("Classification Report:\n", class_report)

# Precision, Recall ve F1-Score ölçütlerini elde etme
report = classification_report(y_test, y_pred, output_dict=True)
precision = report['weighted avg']['precision']
recall = report['weighted avg']['recall']
f1_score = report['weighted avg']['f1-score']

# Performans ölçütlerini bir liste olarak tanımlama
performance_metrics = [accuracy, precision, recall, f1_score]

# Box plot'u oluşturma
plt.figure(figsize=(10, 6))
sns.boxplot(performance_metrics)
plt.xticks(range(4), ['Accuracy', 'Precision', 'Recall', 'F1-Score'])
plt.title('Performans Ölçütleri')
plt.ylabel('Değer')
plt.show()

# Karar ağacını görselleştirme
dtc = DecisionTreeClassifier()
dtc.fit(X_train, y_train)
X = X_train
y = y_train

dot_data = tree.export_graphviz(dtc, out_file=None, 
                      feature_names=X.columns,  
                      class_names=y.unique(),  
                      filled=True, rounded=True,  
                      special_characters=True)  
graph = graphviz.Source(dot_data)  
graph

